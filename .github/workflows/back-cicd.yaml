name: CI/CD
on:
  push:
    paths:
      - "backend/**"

jobs:
  backend-CI:
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10.3.39
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_ROOT_PASSWORD: test_password
        ports:
          - 3310:3306
        options: >-
          --health-cmd "mysqladmin status -h 127.0.0.1 -P 3306 -u root -ptest_password"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 체크아웃
        uses: actions/checkout@v2
      - name: DB에 샘플 데이터 삽입
        run: >-
          mysql --force
          --host="127.0.0.1"
          --port="3310"
          --database="test_db"
          --user="test_user"
          --password="test_password"
          < "backend/src/test/resources/database/spring_test_db.sql"

      - name: JDK 11 설정
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "corretto"

      - name: Application YML 생성
        run: |
          mkdir -p backend/src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > backend/src/main/resources/application-prod.yml
          echo "${{ secrets.APPLICATION_DEV_YML }}" | base64 --decode > backend/src/main/resources/application-dev.yml
          echo "${{ secrets.APPLICATION_AUTH_YML }}" | base64 --decode > backend/src/main/resources/application-auth.yml
          echo "${{ secrets.APPLICATION_MAIL_YML }}" | base64 --decode > backend/src/main/resources/application-mail.yml

      - name: Gradle 빌드
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew build
        shell: bash

      - name: Configure AWS credentials
        if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Dev S3에 업로드
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          mkdir -p before-deploy
          cp scripts/*.sh before-deploy/
          cp appspec.yml before-deploy/
          cp build/libs/cabinet-*.jar before-deploy/
          cd before-deploy && zip -r before-deploy *
          cd ../ && mkdir -p deploy
          mv before-deploy/before-deploy.zip deploy/deploy.zip

          aws s3 cp deploy/deploy.zip s3://cabi-dev-test/deploy.zip

          aws deploy create-deployment \
          --application-name cabi-app-test \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name cabi-group-test \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=cabi-dev-test,bundleType=zip,key=deploy.zip \

      - name: Main EC2 서버에 업로드
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          mkdir -p before-deploy
          cp scripts/*.sh before-deploy/
          cp appspec.yml before-deploy/
          cp build/libs/cabinet-*.jar before-deploy/
          cd before-deploy && zip -r before-deploy *
          cd ../ && mkdir -p deploy
          mv before-deploy/before-deploy.zip deploy/deploy.zip

          aws s3 cp deploy/deploy.zip s3://cabi-main-test/deploy.zip

          aws deploy create-deployment \
          --application-name cabi-app-test \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name cabi-group-test \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=cabi-main-test,bundleType=zip,key=deploy.zip \
