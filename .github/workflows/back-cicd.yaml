name: CI/CD
on:
  push:
    paths:
      - "backend/**"

jobs:
  backend-CI:
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10.3.39
        env:
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
          MYSQL_ROOT_PASSWORD: test_password
        ports:
          - 3310:3306
        options: >-
          --health-cmd "mysqladmin status -h 127.0.0.1 -P 3306 -u root -ptest_password"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 체크아웃
        uses: actions/checkout@v2
      - name: DB에 샘플 데이터 삽입
        run: >-
          mysql --force
          --host="127.0.0.1"
          --port="3310"
          --database="test_db"
          --user="test_user"
          --password="test_password"
          < "backend/src/test/resources/database/spring_test_db.sql"

      - name: JDK 11 설정
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "corretto"

      - name: Application YML 생성
        run: |
          mkdir -p backend/src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > backend/src/main/resources/application-prod.yml
          echo "${{ secrets.APPLICATION_DEV_YML }}" | base64 --decode > backend/src/main/resources/application-dev.yml
          echo "${{ secrets.APPLICATION_AUTH_YML }}" | base64 --decode > backend/src/main/resources/application-auth.yml
          echo "${{ secrets.APPLICATION_MAIL_YML }}" | base64 --decode > backend/src/main/resources/application-mail.yml

      - name: Gradle 빌드
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew build
        shell: bash

      - name: Dev S3에 업로드
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          cd backend
          zip -r deploy.zip build/libs/cabinet-*.jar
          aws s3 cp deploy.zip s3://cabi-dev-test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Main EC2 서버에 업로드
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          cd backend
          zip -r deploy.zip build/libs/cabinet-*.jar
          aws s3 cp deploy.zip s3://cabi-main-test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  backend-CD-develop:
    name: deploy-develop
    runs-on: ubuntu-latest
    needs: [backend-CI]
    if: ${{ github.ref == 'refs/heads/dev' }}
    steps:
      - name: CodeDeploy에 배포
        run: |
          aws deploy create-deployment \
          --application-name cabi-app-test \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name cabi-group-test \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=cabi-dev-test,bundleType=zip,key=deploy.zip \
          --region ap-northeast-2 \

  # backend-CD-main:
  #   name: deploy-main
  #   runs-on: ubuntu-latest
  #   needs: [backend-CI]
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   steps:
  #     - name: 리모트 쉘 접속
  #       uses: appleboy/ssh-action@master
  #       with:
  # host: ${{ secrets.HOST_MAIN }}
  # username: ${{ secrets.USERNAME }}
  # key: ${{ secrets.KEY_NEW }}
  # port: ${{ secrets.PORT }}
  #         script_stop: true
  #         script: |
  #           source $HOME/.bash_profile
  #           echo "해당 리포지토리로 이동"
  #           cd $HOME/42cabi_main
  #           echo "리포지토리 pull"
  #           git pull origin main
  #           echo "앱 빌드"
  #           cd $HOME/42cabi_main/backend
  #           npm install
  #           npm run build
  #           echo "env 파일 복사"
  #           cp $HOME/42cabi_main.env $HOME/42cabi_main/backend/.env
  #           echo "앱 배포 (reload)"
  #           pm2 reload cabi_main
